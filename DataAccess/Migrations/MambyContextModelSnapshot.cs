// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MambyContext))]
    partial class MambyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Identity.Model.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DataAccess.Identity.Model.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entity.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CategoryName = "Giyim",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 517, DateTimeKind.Local).AddTicks(52),
                            Description = "Erkek - Kadın - Çocuk kıyafet.",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Elektronik",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 517, DateTimeKind.Local).AddTicks(53),
                            Description = "Teknolojik araçlar.",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Spor & Outdoor",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 517, DateTimeKind.Local).AddTicks(54),
                            Description = "Spor ve dış giyim malzemeleri.",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Ayakkabı",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 517, DateTimeKind.Local).AddTicks(56),
                            Description = "Erkek - Kadın - Çocuk ayakkabı.",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Kozmetik",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 517, DateTimeKind.Local).AddTicks(57),
                            Description = "Makyaj ve kişisel bakım malzemeleri.",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Ev & Yaşam",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 517, DateTimeKind.Local).AddTicks(58),
                            Description = "Ev ve yaşam için gerekli genel malzemeler.",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Entity.Entities.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("Entity.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("GivenDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Entity.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContentImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentImage2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentImage3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentImage4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "NIKE",
                            CategoryId = 7,
                            ContentImage = "/images/content2.webp",
                            ContentImage2 = "/images/content3.webp",
                            ContentImage3 = "/images/content0.webp",
                            ContentImage4 = "/images/content1.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9903),
                            Description = "Rahatlık ve moda odaklı tasarlanmış şık erkek ayakkabısı. Bu NIKE Air-Force ayakkabıları, günlük veya spor giyim için mükemmel bir seçenek sunar.",
                            IsDeleted = false,
                            Name = "Air-Force Ayakkabı",
                            Point = 10,
                            Price = 2500m,
                            Stock = 50,
                            ThumbnailImage = "/images/thumbnail.webp"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "NIKE",
                            CategoryId = 7,
                            ContentImage = "/images/NikeCortez1.webp",
                            ContentImage2 = "/images/NikeCortez2.webp",
                            ContentImage3 = "/images/NikeCortez3.webp",
                            ContentImage4 = "/images/NikeCortez4.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9906),
                            Description = "Stil ve işlevselliğe odaklanan NIKE tarafından tasarlanmış şık kadın ayakkabıları. Nike-Cortez koleksiyonu, günlük giyim için moda ve konforu mükemmel bir şekilde birleştiriyor.",
                            IsDeleted = false,
                            Name = "Nike-Cortez Ayakkabı",
                            Point = 10,
                            Price = 3499m,
                            Stock = 50,
                            ThumbnailImage = "/images/NikeCortez.webp"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "NIKE",
                            CategoryId = 7,
                            ContentImage = "/images/NikeCortez2.webp",
                            ContentImage2 = "/images/NikeV2KRun3.webp",
                            ContentImage3 = "/images/NikeV2KRun4.webp",
                            ContentImage4 = "/images/NikeV2KRun1.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9909),
                            Description = "NIKE, aktif bir yaşam tarzı için tasarlanmış kadın ayakkabısı olan V2 Run'u sunar. Bu rahat ve dayanıklı koşu ayakkabıları ile performans ve stilin tadını çıkarın.",
                            IsDeleted = false,
                            Name = "Nike V2 Run Ayakkabı",
                            Point = 10,
                            Price = 2999m,
                            Stock = 50,
                            ThumbnailImage = "/images/NikeV2KRun.webp"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "NIKE",
                            CategoryId = 7,
                            ContentImage = "/images/NikeAirMax90Futura2.webp",
                            ContentImage2 = "/images/NikeAirMax90Futura3.webp",
                            ContentImage3 = "/images/NikeAirMax90Futura4.webp",
                            ContentImage4 = "/images/NikeAirMax90Futura5.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9911),
                            Description = " Moda ve sporu bir araya getiren, kadınlar için ideal olan Nike AirMax 90 Futura. Bu ayakkabılar şık tasarımı ve gün boyu konforu ile öne çıkıyor.",
                            IsDeleted = false,
                            Name = "Nike AirMax 90 Futura Ayakkabı",
                            Point = 10,
                            Price = 1499m,
                            Stock = 110,
                            ThumbnailImage = "/images/NikeAirMax90Futura1.webp"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "NIKE",
                            CategoryId = 7,
                            ContentImage = "/images/NikeCourtVısıonLo2.webp",
                            ContentImage2 = "/images/NikeCourtVısıonLo3.webp",
                            ContentImage3 = "/images/NikeCourtVısıonLo4.webp",
                            ContentImage4 = "/images/NikeCourtVısıonLo5.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9913),
                            Description = "Stilin bir dokunuşuyla erkek spor ayakkabıları. Nike Court Vısıon Lo koleksiyonu, spor ve günlük kullanım için performans ile trend tasarımı mükemmel bir şekilde birleştiriyor.",
                            IsDeleted = false,
                            Name = "Nike Court Vısıon Lo Ayakkabı",
                            Point = 10,
                            Price = 4999m,
                            Stock = 150,
                            ThumbnailImage = "/images/NikeCourtVısıonLo1.webp"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "adidas",
                            CategoryId = 7,
                            ContentImage = "/images/stansmith1.webp",
                            ContentImage2 = "/images/stansmith2.webp",
                            ContentImage3 = "/images/stansmith3.webp",
                            ContentImage4 = "/images/stansmith4.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9916),
                            Description = "Klasik erkek ayakkabılarından olan adidas Stan Smith koleksiyonu, zamansız stili ve konforuyla bilinir. Bu ikonik sneaker'lar ile günlük görünümünüzü yükseltin.",
                            IsDeleted = false,
                            Name = "adidas Stan Smith Ayakkabı",
                            Point = 10,
                            Price = 1849m,
                            Stock = 150,
                            ThumbnailImage = "/images/stansmith.webp"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "adidas",
                            CategoryId = 7,
                            ContentImage = "/images/adidasniteball1.webp",
                            ContentImage2 = "/images/adidasniteball2.webp",
                            ContentImage3 = "/images/adidasniteball3.webp",
                            ContentImage4 = "/images/adidasniteball4.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9918),
                            Description = "adidas'ın tasarladığı cinsiyet ayrımı olmayan spor ayakkabıları, Niteball koleksiyonu, çok yönlülük ve performans için tasarlanmıştır. Bu ayakkabılar çeşitli spor ve aktiviteler için uygundur.",
                            IsDeleted = false,
                            Name = "adidas niteball unisex Ayakkabı",
                            Point = 10,
                            Price = 1849m,
                            Stock = 150,
                            ThumbnailImage = "/images/adidasniteball.webp"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "NewBalance",
                            CategoryId = 7,
                            ContentImage = "/images/NewBalance5301.webp",
                            ContentImage2 = "/images/NewBalance5302.webp",
                            ContentImage3 = "/images/NewBalance5305.webp",
                            ContentImage4 = "/images/NewBalance5304.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9920),
                            Description = "NewBalance530 erkek ayakkabıları ile stil sahibi bir şekilde doğayı keşfedin. Bu NewBalance sneaker'lar, sert dayanıklılık ve modern tasarımın mükemmel bir kombinasyonunu sunar, aktif yaşam tarzınız için.",
                            IsDeleted = false,
                            Name = "NewBalance530 Ayakkabı",
                            Point = 10,
                            Price = 3599m,
                            Stock = 45,
                            ThumbnailImage = "/images/NewBalance530.webp"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "DS Damat",
                            CategoryId = 2,
                            ContentImage = "/images/takımcontent1.webp",
                            ContentImage2 = "/images/takımcontent2.webp",
                            ContentImage3 = "/images/takımcontent3.webp",
                            ContentImage4 = "/images/takımcontent4.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9922),
                            Description = "Slim Fit Siyah Düz Takim Elbise",
                            IsDeleted = false,
                            Name = "Erkek Takım Elbise",
                            Point = 10,
                            Price = 9999m,
                            Stock = 120,
                            ThumbnailImage = "/images/takımthubnail.webp"
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Asus ROG",
                            CategoryId = 4,
                            ContentImage = "/images/asuscontent1.jpeg",
                            ContentImage2 = "/images/asuscontent2.jpeg",
                            ContentImage3 = "/images/asuscontent3.jpeg",
                            ContentImage4 = "/images/asuscontent4.jpeg",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9924),
                            Description = "Asus ROG Strix G18 G814JI-N6079 Intel Core i9 13980HX 16GB 1TB SSD RTX4070 Freedos 18 WQXGA 240Hz Taşınabilir Bilgisayar",
                            IsDeleted = false,
                            Name = "Oyuncu Bilgisayarı",
                            Point = 10,
                            Price = 74956m,
                            Stock = 78,
                            ThumbnailImage = "/images/asusthumbnail.jpeg"
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Nike",
                            CategoryId = 5,
                            ContentImage = "/images/gscontent1.webp",
                            ContentImage2 = "/images/gscontent2.webp",
                            ContentImage3 = "/images/gscontent3.webp",
                            ContentImage4 = "/images/gscontent4.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9926),
                            Description = "Nike Galatasaray 2023/2024 Parçalı İç Saha Forma FN0200-836",
                            IsDeleted = false,
                            Name = "Galatasaray 23-24 Sezonu İç Saha Forma",
                            Point = 10,
                            Price = 1200m,
                            Stock = 500,
                            ThumbnailImage = "/images/gsthumbnail.webp"
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Armani",
                            CategoryId = 9,
                            ContentImage = "/images/armanicontent1.webp",
                            ContentImage2 = "/images/armanicontent2.webp",
                            ContentImage3 = "/images/armanicontent3.webp",
                            ContentImage4 = "/images/armanicontent4.webp",
                            DateTime = new DateTime(2024, 1, 2, 0, 10, 27, 516, DateTimeKind.Local).AddTicks(9929),
                            Description = "Giorgio Armani, güçlü ve şehvetli bir iz için aromatik ve odunsu notalara sahip erkekler için yeni doldurulabilir parfümü ARMANI CODE PARFUM'u tanıttı.",
                            IsDeleted = false,
                            Name = "Erkek Parfüm",
                            Point = 10,
                            Price = 5990m,
                            Stock = 300,
                            ThumbnailImage = "/images/armanithumbnail.webp"
                        });
                });

            modelBuilder.Entity("Entity.Entities.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeatures");
                });

            modelBuilder.Entity("Entity.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Neighbourhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Entity.Entities.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entity.Entities.Command", b =>
                {
                    b.HasOne("Entity.Entities.Product", null)
                        .WithMany("Commands")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Entities.Product", b =>
                {
                    b.HasOne("Entity.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entity.Entities.ProductFeature", b =>
                {
                    b.HasOne("Entity.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entity.Entities.SaleDetail", b =>
                {
                    b.HasOne("Entity.Entities.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Entities.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Identity.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccess.Identity.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccess.Identity.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DataAccess.Identity.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Identity.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccess.Identity.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entity.Entities.Product", b =>
                {
                    b.Navigation("Commands");
                });

            modelBuilder.Entity("Entity.Entities.Sale", b =>
                {
                    b.Navigation("SaleDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
